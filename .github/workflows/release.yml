name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build binaries
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/api-linux-amd64 cmd/api/main.go
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/api-linux-arm64 cmd/api/main.go
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/api-darwin-amd64 cmd/api/main.go
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/api-darwin-arm64 cmd/api/main.go
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/api-windows-amd64.exe cmd/api/main.go

      - name: Create checksums
        run: cd build && sha256sum * > checksums.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}

      - name: Generate release notes
        run: |
          cat > release_notes.md << 'EOF'
          ## Release ${{ steps.version.outputs.version }}

          ### Docker
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ```

          ### Binaries
          - Linux AMD64: `api-linux-amd64`
          - Linux ARM64: `api-linux-arm64`
          - macOS AMD64: `api-darwin-amd64`
          - macOS ARM64: `api-darwin-arm64`
          - Windows AMD64: `api-windows-amd64.exe`

          Verify checksums: `sha256sum -c checksums.txt`
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: |
            build/api-linux-amd64
            build/api-linux-arm64
            build/api-darwin-amd64
            build/api-darwin-arm64
            build/api-windows-amd64.exe
            build/checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest tag
        run: |
          git tag -f latest
          git push -f origin latest

