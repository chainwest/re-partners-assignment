name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Проверка форматирования и линтинг
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Check go fmt
        run: |
          FMT_OUTPUT=$(gofmt -l .)
          if [ -n "$FMT_OUTPUT" ]; then
            echo "$FMT_OUTPUT"
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

  # Job 2: Тесты
  test:
    name: Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: packapi
          POSTGRES_PASSWORD: packapi_secret
          POSTGRES_DB: packapi_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U packapi; do
            sleep 2
          done

      - name: Run migrations
        env:
          DATABASE_URL: postgres://packapi:packapi_secret@localhost:5432/packapi_test?sslmode=disable
        run: |
          PGPASSWORD=packapi_secret psql -h localhost -U packapi -d packapi_test -f deployments/migrations/001_create_pack_sets.up.sql
          PGPASSWORD=packapi_secret psql -h localhost -U packapi -d packapi_test -f deployments/migrations/002_create_calculations.up.sql

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgres://packapi:packapi_secret@localhost:5432/packapi_test?sslmode=disable
          REDIS_ADDR: localhost:6379
          REDIS_PASSWORD: ""
          REDIS_DB: 0
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: |
          go tool cover -func=coverage.out > coverage.txt
          cat coverage.txt | tail -n 1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.txt
          retention-days: 30

  # Job 3: Бенчмарки
  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run benchmarks
        run: go test -bench=. -benchmem -run=^$ ./... | tee benchmark_results.txt

      - name: Generate benchmark report
        run: |
          echo "# Benchmark Report" > benchmark_report.md
          echo "**Date:** $(date -u)" >> benchmark_report.md
          echo "**Commit:** ${{ github.sha }}" >> benchmark_report.md
          echo '```' >> benchmark_report.md
          cat benchmark_results.txt >> benchmark_report.md
          echo '```' >> benchmark_report.md

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-report
          path: |
            benchmark_results.txt
            benchmark_report.md
          retention-days: 90

      - name: Comment benchmark results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('benchmark_report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Job 4: Сборка и публикация Docker-образа
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}

      - name: Image digest
        run: echo "Tags: ${{ steps.meta.outputs.tags }}"

  # Job 5: Post-Deploy Health Check
  post-deploy:
    name: Post-Deploy Health Check
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST || 'http://localhost:8080' }}
        run: |
          HEALTH_RESPONSE=$(curl -s -w "\n%{http_code}" "$DEPLOY_HOST/healthz")
          HTTP_CODE=$(echo "$HEALTH_RESPONSE" | tail -n 1)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "Health check: PASSED"
            exit 0
          else
            echo "Health check: FAILED (HTTP $HTTP_CODE)"
            exit 1
          fi

      - name: Upload deployment logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: post-deploy-logs
          path: |
            /tmp/*.log
          retention-days: 30
          if-no-files-found: ignore

  # Job 6: Итоговый отчет
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint, test, benchmark]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# CI Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Benchmark | ${{ needs.benchmark.result }} |" >> $GITHUB_STEP_SUMMARY

